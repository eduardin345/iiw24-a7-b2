// --- Gerenciamento da Garagem e LocalStorage ---
let garagem = []; // Array para armazenar as inst√¢ncias dos ve√≠culos
const STORAGE_KEY = 'minhaGaragemInteligente_v2'; // Mudar a chave se a estrutura de dados mudar significativamente

function salvarGaragem() {
    try {
        // Usa o m√©todo toJSON de cada ve√≠culo para garantir a serializa√ß√£o correta
        const garagemJSON = JSON.stringify(garagem.map(v => v.toJSON()));
        localStorage.setItem(STORAGE_KEY, garagemJSON);
        // console.log("Garagem salva:", garagemJSON); // Log para debug (pode ser extenso)
    } catch (error) {
        console.error("Erro cr√≠tico ao salvar garagem no LocalStorage:", error);
        // Tenta notificar o usu√°rio sobre o problema
        exibirNotificacao("ERRO GRAVE: N√£o foi poss√≠vel salvar os dados da garagem. Altera√ß√µes recentes podem ser perdidas ao fechar.", 'error', 0); // 0 = n√£o esconder automaticamente
    }
}

function carregarGaragem() {
    try {
        const garagemJSON = localStorage.getItem(STORAGE_KEY);
        if (garagemJSON) {
            const garagemGenerica = JSON.parse(garagemJSON);
            // Reidrata os objetos: transforma JSON gen√©rico em inst√¢ncias de classes
            // Depende do m√©todo est√°tico Veiculo.fromJSON
            garagem = garagemGenerica.map(veiculoJSON => Veiculo.fromJSON(veiculoJSON))
                                    .filter(v => v !== null); // Filtra ve√≠culos que falharam na reidrata√ß√£o

            // console.log(`Garagem carregada: ${garagem.length} ve√≠culos.`); // Log para debug
             if (garagem.length !== garagemGenerica.length) {
                console.warn("Alguns ve√≠culos n√£o puderam ser carregados corretamente do LocalStorage.");
                exibirNotificacao("Aviso: Alguns dados de ve√≠culos podem n√£o ter sido carregados corretamente.", 'warning');
             }
        } else {
            garagem = []; // Inicia vazia se n√£o houver nada salvo
            // console.log("Nenhuma garagem salva encontrada. Iniciando vazia.");
        }
    } catch (error) {
        console.error("Erro ao carregar ou parsear garagem do LocalStorage:", error);
        exibirNotificacao("Erro ao carregar dados da garagem. Verifique o console para detalhes. Iniciando com garagem vazia.", 'error');
        garagem = []; // Reseta em caso de erro grave de parse para evitar mais problemas
        // Opcional: tentar limpar o localStorage corrompido
        // localStorage.removeItem(STORAGE_KEY);
    }
    // Atualiza a UI ap√≥s carregar/falhar
    renderizarGaragem();
    renderizarAgendamentosFuturos();
    verificarAgendamentosProximos(); // Verifica lembretes ao iniciar
}

// --- Fun√ß√µes de Renderiza√ß√£o da UI ---

function renderizarGaragem() {
    const listaVeiculosDiv = document.getElementById('listaVeiculos');
    listaVeiculosDiv.innerHTML = ''; // Limpa a lista atual

    if (garagem.length === 0) {
        listaVeiculosDiv.innerHTML = '<p style="text-align: center; color: #777;">Sua garagem est√° vazia. Adicione um ve√≠culo acima!</p>';
        return;
    }

    // Ordena a garagem (ex: por modelo) antes de renderizar - opcional
    garagem.sort((a, b) => a.modelo.localeCompare(b.modelo));

    garagem.forEach(veiculo => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('vehicle-item');
        itemDiv.setAttribute('data-id', veiculo.id); // Adiciona ID para refer√™ncia futura
        itemDiv.innerHTML = `
            <span><strong style="color: #2980b9;">${veiculo.modelo}</strong> (${veiculo.tipoVeiculo}) - Cor: ${veiculo.cor}</span>
            <div class="actions">
                <button onclick="abrirModalDetalhes('${veiculo.id}')" title="Ver detalhes, hist√≥rico e agendar manuten√ß√£o">Detalhes / Manuten√ß√£o</button>
                <button class="warning" onclick="removerVeiculo('${veiculo.id}')" title="Remover ve√≠culo permanentemente">Remover</button>
            </div>
        `;
        listaVeiculosDiv.appendChild(itemDiv);
    });
}

function renderizarHistoricoManutencaoModal(veiculoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    const historicoDiv = document.getElementById('modalHistoricoManutencao');

    if (!veiculo) {
        console.error("Ve√≠culo n√£o encontrado para renderizar hist√≥rico:", veiculoId);
        historicoDiv.innerHTML = '<p>Erro: Ve√≠culo n√£o encontrado.</p>';
        return;
    }
    // Usa o m√©todo getHistoricoHTML da classe Veiculo
    historicoDiv.innerHTML = veiculo.getHistoricoHTML();
}


function renderizarAgendamentosFuturos() {
    const listaAgendamentosDiv = document.getElementById('listaAgendamentosFuturos');
    listaAgendamentosDiv.innerHTML = '';
    const agora = new Date();
    let agendamentos = [];

    // Coleta todos os agendamentos futuros de todos os ve√≠culos
    garagem.forEach(veiculo => {
        veiculo.historicoManutencao.forEach(manutencao => {
            // Verifica se a data √© v√°lida e futura
            if (manutencao.data instanceof Date && !isNaN(manutencao.data.getTime()) && manutencao.data > agora) {
                agendamentos.push({ veiculo: veiculo, manutencao: manutencao });
            }
        });
    });

    // Ordena por data (mais pr√≥ximo primeiro)
    agendamentos.sort((a, b) => a.manutencao.data - b.manutencao.data);

    if (agendamentos.length === 0) {
        listaAgendamentosDiv.innerHTML = '<p style="text-align: center; color: #777;">Nenhum agendamento futuro.</p>';
        return;
    }

    agendamentos.forEach(item => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('schedule-item');
         itemDiv.setAttribute('data-id', item.manutencao.id);
        // Formata a manuten√ß√£o incluindo o nome do ve√≠culo
        // Depende do m√©todo formatar da classe Manutencao
        itemDiv.innerHTML = `
             <span>${item.manutencao.formatar(true, `${item.veiculo.modelo} (${item.veiculo.cor})`)}</span>
             <button class="small-warning" onclick="removerManutencao('${item.veiculo.id}', '${item.manutencao.id}')" title="Cancelar este agendamento">Cancelar</button>
        `;
        listaAgendamentosDiv.appendChild(itemDiv);
    });
}

// --- Fun√ß√µes do Modal e A√ß√µes do Ve√≠culo ---

const modal = document.getElementById('modalDetalhesVeiculo');
const modalContent = modal.querySelector('.modal-content'); // Para anima√ß√£o de fechar

function abrirModalDetalhes(veiculoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
        exibirNotificacao("Erro: Ve√≠culo n√£o encontrado.", "error");
        return;
    }

    document.getElementById('modalTituloVeiculo').textContent = `Detalhes: ${veiculo.modelo} (${veiculo.cor})`;
    document.getElementById('manutencaoVeiculoId').value = veiculoId; // Associa formul√°rio ao ve√≠culo

    atualizarInfoVeiculoNoModal(veiculoId); // Popula infos e bot√µes de a√ß√£o
    renderizarHistoricoManutencaoModal(veiculoId); // Popula hist√≥rico e agendamentos do ve√≠culo

    // Limpa e configura formul√°rio de manuten√ß√£o
    const formManutencao = document.getElementById('formManutencao');
    formManutencao.reset();
    // Configura o datepicker para o campo de data (Assume que flatpickr est√° carregado)
    if (typeof flatpickr !== 'undefined') {
        flatpickr("#manutencaoData", {
            enableTime: true,
            dateFormat: "Y-m-d H:i", // Formato ISO compat√≠vel com new Date()
            minDate: "today", // Impede agendar no passado (opcional)
            locale: "pt" // Usa localiza√ß√£o em portugu√™s (requer script de localiza√ß√£o)
        });
    }

    modal.style.display = 'block';
    // Adiciona classe para anima√ß√£o de entrada (se houver)
    modalContent.classList.add('animate-in'); // Crie a anima√ß√£o CSS correspondente
}

function fecharModal() {
    // Adiciona classe para anima√ß√£o de sa√≠da (opcional)
    modalContent.classList.add('animate-out');

    // Espera a anima√ß√£o terminar antes de esconder o modal (ajuste o tempo se necess√°rio)
    // setTimeout(() => {
        modal.style.display = 'none';
        modalContent.classList.remove('animate-in', 'animate-out'); // Limpa classes de anima√ß√£o
    // }, 300); // Tempo deve corresponder √† dura√ß√£o da anima√ß√£o CSS 'animate-out'
}

// Fecha o modal se clicar fora do conte√∫do (no fundo escuro)
window.onclick = function(event) {
    if (event.target == modal) {
        fecharModal();
    }
}
// Fecha o modal ao pressionar a tecla ESC
window.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && modal.style.display === 'block') {
        fecharModal();
    }
});

function atualizarInfoVeiculoNoModal(veiculoId) {
    // S√≥ atualiza se o modal estiver vis√≠vel e for o ve√≠culo correto
    if (modal.style.display !== 'block' || document.getElementById('manutencaoVeiculoId').value !== veiculoId) {
        return;
    }

    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) return; // Seguran√ßa extra

    const infoDiv = document.getElementById('modalInfoVeiculo');
    const acoesDiv = document.getElementById('modalAcoesVeiculo');

    // Usa o m√©todo exibirInformacoesCompletaHTML da classe Veiculo (e suas filhas)
    infoDiv.innerHTML = veiculo.exibirInformacoesCompletaHTML();
    acoesDiv.innerHTML = ''; // Limpa a√ß√µes anteriores para reconstruir

    // Bot√µes de A√ß√£o Comuns
    if (!veiculo.ligado) {
        acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'ligar')" title="Ligar o motor"><span role="img" aria-label="Chave">üîë</span> Ligar</button>`;
    } else {
        acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'desligar')" title="Desligar o motor"><span role="img" aria-label="Bot√£o Power Off">üîå</span> Desligar</button>`;
        acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'acelerar', 10)" title="Aumentar velocidade em 10 km/h"><span role="img" aria-label="Pedal">üí®</span> Acelerar (+10)</button>`;
    }
    acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'buzinar')" title="Tocar a buzina"><span role="img" aria-label="Megafone">üì£</span> Buzinar</button>`;

    // Bot√µes de A√ß√£o Espec√≠ficos por Tipo
    if (veiculo instanceof CarroEsportivo) {
        if (!veiculo.turbo) {
            acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'ativarTurbo')" title="Ativar o turbo (requer motor ligado)"><span role="img" aria-label="Foguete">üöÄ</span> Ativar Turbo</button>`;
        } else {
            acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'desativarTurbo')" title="Desativar o turbo"><span role="img" aria-label="Caracol">üêå</span> Desativar Turbo</button>`;
        }
    } else if (veiculo instanceof Caminhao) {
        // Cria um container flex para os controles de carga
        const cargaContainer = document.createElement('div');
        cargaContainer.style.display = 'flex';
        cargaContainer.style.alignItems = 'center';
        cargaContainer.style.marginTop = '10px'; // Espa√ßamento
        cargaContainer.innerHTML = `
            <input type="number" id="pesoCargaModal_${veiculo.id}" placeholder="Peso (kg)" min="1" style="width: 120px; margin-right: 5px; padding: 8px;" title="Digite o peso para carregar ou descarregar">
            <button onclick="executarAcaoVeiculo('${veiculo.id}', 'carregar')" title="Adicionar carga ao caminh√£o"><span role="img" aria-label="Seta para cima">‚¨ÜÔ∏è</span> Carregar</button>
            <button onclick="executarAcaoVeiculo('${veiculo.id}', 'descarregar')" title="Remover carga do caminh√£o"><span role="img" aria-label="Seta para baixo">‚¨áÔ∏è</span> Descarregar</button>
        `;
         acoesDiv.appendChild(cargaContainer);
    }
}

// Fun√ß√£o gen√©rica para chamar m√©todos do ve√≠culo a partir da UI
function executarAcaoVeiculo(veiculoId, acao, param = null) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
         exibirNotificacao("Erro interno: Ve√≠culo n√£o encontrado para executar a√ß√£o.", "error");
         return;
     }

    // Tratamento especial para carregar/descarregar caminh√£o para pegar o valor do input
    if ((acao === 'carregar' || acao === 'descarregar') && veiculo instanceof Caminhao) {
        const inputPeso = document.getElementById(`pesoCargaModal_${veiculo.id}`);
        if (!inputPeso) {
            console.error("Input de peso n√£o encontrado no modal para caminh√£o.");
            return;
        }
        param = inputPeso.value; // Pega o valor atual do input
         inputPeso.value = ''; // Limpa o campo ap√≥s usar (ou n√£o, dependendo da prefer√™ncia)
    }

    // Verifica se o m√©todo existe no objeto ve√≠culo
    if (typeof veiculo[acao] === 'function') {
        try {
            veiculo[acao](param); // Chama o m√©todo correspondente
            // A responsabilidade de atualizar UI/salvar est√° dentro dos m√©todos das classes agora
        } catch (error) {
             console.error(`Erro ao executar a√ß√£o '${acao}' no ve√≠culo ${veiculo.id}:`, error);
             exibirNotificacao(`Erro ao executar ${acao}: ${error.message}`, 'error');
        }
    } else {
        console.error(`A√ß√£o '${acao}' n√£o √© uma fun√ß√£o v√°lida no ve√≠culo ${veiculo.id}`);
        exibirNotificacao(`Erro interno: A√ß√£o '${acao}' desconhecida.`, 'error');
    }
}

// --- Manipula√ß√£o de Formul√°rios e Eventos ---

// Formul√°rio Adicionar Ve√≠culo
const formAdicionarVeiculo = document.getElementById('formAdicionarVeiculo');
formAdicionarVeiculo.addEventListener('submit', function(event) {
    event.preventDefault(); // Impede recarregamento da p√°gina

    const tipo = document.getElementById('tipoVeiculo').value;
    const modelo = document.getElementById('modeloVeiculo').value;
    const cor = document.getElementById('corVeiculo').value;

    if (!tipo || !modelo.trim() || !cor.trim()) {
         exibirNotificacao("Por favor, preencha tipo, modelo e cor do ve√≠culo.", 'warning');
         return;
    }

    let novoVeiculo;
    try {
        // Depende das classes Carro, CarroEsportivo, Caminhao
        switch (tipo) {
            case 'Carro':
                novoVeiculo = new Carro(modelo, cor);
                break;
            case 'CarroEsportivo':
                novoVeiculo = new CarroEsportivo(modelo, cor);
                break;
            case 'Caminhao':
                const capacidadeInput = document.getElementById('capacidadeCargaVeiculo');
                const capacidade = capacidadeInput.value;
                if (!capacidade || isNaN(parseFloat(capacidade)) || parseFloat(capacidade) < 0) {
                    exibirNotificacao("Capacidade de carga inv√°lida para o caminh√£o.", 'error');
                    capacidadeInput.focus();
                    return;
                }
                novoVeiculo = new Caminhao(modelo, cor, capacidade);
                break;
            default:
                exibirNotificacao("Tipo de ve√≠culo selecionado √© inv√°lido.", 'error');
                return;
        }

        garagem.push(novoVeiculo);
        salvarGaragem();
        renderizarGaragem(); // Atualiza a lista na tela principal
        exibirNotificacao(`Ve√≠culo ${modelo} adicionado com sucesso!`, 'success');
        formAdicionarVeiculo.reset(); // Limpa o formul√°rio
        document.getElementById('campoCapacidadeCarga').style.display = 'none'; // Esconde campo do caminh√£o

    } catch (error) {
        console.error("Erro ao criar ou adicionar ve√≠culo:", error);
        exibirNotificacao(`Erro ao adicionar ve√≠culo: ${error.message}`, 'error');
    }
});

// Mostra/Esconde campo de capacidade ao mudar tipo de ve√≠culo
document.getElementById('tipoVeiculo').addEventListener('change', function() {
    const campoCapacidadeDiv = document.getElementById('campoCapacidadeCarga');
    const capacidadeInput = document.getElementById('capacidadeCargaVeiculo');
    const show = (this.value === 'Caminhao');

    campoCapacidadeDiv.style.display = show ? 'block' : 'none';
    capacidadeInput.required = show;
     if (!show) {
         capacidadeInput.value = '';
     }
});

// Formul√°rio Adicionar/Agendar Manuten√ß√£o (dentro do Modal)
const formManutencao = document.getElementById('formManutencao');
formManutencao.addEventListener('submit', function(event) {
    event.preventDefault();

    const veiculoId = document.getElementById('manutencaoVeiculoId').value;
    const dataInput = document.getElementById('manutencaoData');
    const tipoInput = document.getElementById('manutencaoTipo');
    const custoInput = document.getElementById('manutencaoCusto');
    const descricaoInput = document.getElementById('manutencaoDescricao');

    const veiculo = garagem.find(v => v.id === veiculoId);

    if (!veiculo) {
        exibirNotificacao("Erro: Ve√≠culo n√£o encontrado para adicionar manuten√ß√£o.", 'error');
        return;
    }

    const data = dataInput.value;
    const tipo = tipoInput.value;
    const custo = custoInput.value;
    const descricao = descricaoInput.value;

     if (!data || !tipo.trim() || custo === '' || parseFloat(custo) < 0) {
         exibirNotificacao("Preencha Data, Tipo e Custo (n√£o negativo) corretamente.", 'warning');
         return;
     }

    try {
        // Cria a inst√¢ncia (a classe Manutencao tamb√©m valida internamente)
        // Depende da classe Manutencao
        const novaManutencao = new Manutencao(data, tipo, custo, descricao);

        // Tenta adicionar ao hist√≥rico do ve√≠culo
        // Depende do m√©todo adicionarManutencao da classe Veiculo
        const adicionadoComSucesso = veiculo.adicionarManutencao(novaManutencao);

        if (adicionadoComSucesso) {
            renderizarHistoricoManutencaoModal(veiculoId); // Atualiza a lista no modal
            renderizarAgendamentosFuturos(); // Atualiza lista geral de agendamentos
            formManutencao.reset(); // Limpa o formul√°rio
            const fpInstance = dataInput._flatpickr;
            if (fpInstance) fpInstance.close();
            verificarAgendamentosProximos(); // Re-verifica lembretes
        }
        // Se n√£o adicionou com sucesso, a notifica√ß√£o de erro j√° foi exibida por adicionarManutencao

    } catch (error) {
        console.error("Erro ao criar ou adicionar manuten√ß√£o via formul√°rio:", error);
        exibirNotificacao(`Erro no formul√°rio de manuten√ß√£o: ${error.message}`, 'error');
    }
});

// Fun√ß√£o para remover ve√≠culo da garagem
function removerVeiculo(veiculoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
         exibirNotificacao("Erro: Ve√≠culo n√£o encontrado para remo√ß√£o.", "error");
         return;
     }

    if (confirm(`ATEN√á√ÉO!\nTem certeza que deseja remover PERMANENTEMENTE o ve√≠culo "${veiculo.modelo} (${veiculo.cor})"?\n\nTodo o hist√≥rico de manuten√ß√£o ser√° perdido.`)) {
        garagem = garagem.filter(v => v.id !== veiculoId);
        salvarGaragem();
        renderizarGaragem();
        renderizarAgendamentosFuturos();
        exibirNotificacao(`Ve√≠culo ${veiculo.modelo} removido com sucesso.`, 'success');

        if (modal.style.display === 'block' && document.getElementById('manutencaoVeiculoId').value === veiculoId) {
            fecharModal();
        }
    }
}

// Fun√ß√£o para remover uma manuten√ß√£o/agendamento espec√≠fico (chamada pelos bot√µes)
function removerManutencao(veiculoId, manutencaoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
         exibirNotificacao("Erro: Ve√≠culo n√£o encontrado para remover manuten√ß√£o.", "error");
         return;
     }

     const manutencao = veiculo.historicoManutencao.find(m => m.id === manutencaoId);
     if (!manutencao) {
         exibirNotificacao("Erro: Registro de manuten√ß√£o n√£o encontrado.", "error");
         return;
     }

    if (confirm(`Tem certeza que deseja remover o registro:\n"${manutencao.tipo}" em ${manutencao.data.toLocaleDateString()}?`)) {
        // Depende do m√©todo removerManutencaoPorId da classe Veiculo
        const removido = veiculo.removerManutencaoPorId(manutencaoId);

        if (removido) {
            exibirNotificacao('Manuten√ß√£o/Agendamento removido.', 'success');
             if (modal.style.display === 'block' && document.getElementById('manutencaoVeiculoId').value === veiculoId) {
                renderizarHistoricoManutencaoModal(veiculoId); // Atualiza no modal se aberto
             }
            renderizarAgendamentosFuturos(); // Atualiza na lista geral
            verificarAgendamentosProximos(); // Re-verifica lembretes
        } else {
            exibirNotificacao('N√£o foi poss√≠vel remover a manuten√ß√£o.', 'error');
        }
    }
}

// --- Notifica√ß√µes e Lembretes ---
let notificationTimeout; // Armazena o ID do timeout da notifica√ß√£o

function exibirNotificacao(mensagem, tipo = 'info', duracaoMs = 5000) { // Tipos: 'info', 'success', 'warning', 'error'
    const notificacaoDiv = document.getElementById('notificacoes');
    if (!notificacaoDiv) return;

    notificacaoDiv.textContent = mensagem;
    notificacaoDiv.className = '';
    notificacaoDiv.classList.add(tipo);
    notificacaoDiv.classList.add('show');

    clearTimeout(notificationTimeout);

    if (duracaoMs > 0) {
        notificationTimeout = setTimeout(() => {
            notificacaoDiv.classList.remove('show');
        }, duracaoMs);
    }
}

function verificarAgendamentosProximos() {
    const agora = new Date();
    const amanha = new Date(agora);
    amanha.setDate(agora.getDate() + 1);
    const limite = new Date(agora.getTime() + 2 * 24 * 60 * 60 * 1000); // Pr√≥ximas 48 horas

    let lembretes = [];

    garagem.forEach(veiculo => {
        veiculo.historicoManutencao.forEach(manutencao => {
            if (manutencao.data instanceof Date && !isNaN(manutencao.data.getTime()) &&
                manutencao.data > agora && manutencao.data < limite)
            {
                const dataManutencao = manutencao.data;
                let quando = '';
                const hora = dataManutencao.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
                 const hojeStr = agora.toDateString();
                 const amanhaStr = amanha.toDateString();
                 const dataManutencaoStr = dataManutencao.toDateString();

                if (dataManutencaoStr === hojeStr) {
                    quando = `HOJE √†s ${hora}`;
                } else if (dataManutencaoStr === amanhaStr) {
                    quando = `AMANH√É √†s ${hora}`;
                } else {
                     quando = `em ${dataManutencao.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit' })} √†s ${hora}`;
                 }
                lembretes.push(`üîî LEMBRETE: ${manutencao.tipo} (${veiculo.modelo}) ${quando}.`);
            }
        });
    });

    if (lembretes.length > 0) {
        exibirNotificacao(lembretes.join('\n'), 'warning', 10000); // Dura 10 segundos
    }
}

// --- Inicializa√ß√£o da Aplica√ß√£o ---
document.addEventListener('DOMContentLoaded', () => {
    if (typeof flatpickr !== 'undefined' && flatpickr.l10ns && flatpickr.l10ns.pt) {
        flatpickr.localize(flatpickr.l10ns.pt);
    } else {
         console.warn("Flatpickr ou localiza√ß√£o 'pt' n√£o encontrados. Datepicker usar√° ingl√™s.");
    }

    carregarGaragem(); // Carrega os dados e renderiza a UI inicial

    const tipoVeiculoSelect = document.getElementById('tipoVeiculo');
    if (tipoVeiculoSelect.value === 'Caminhao') {
        document.getElementById('campoCapacidadeCarga').style.display = 'block';
        document.getElementById('capacidadeCargaVeiculo').required = true;
    }

    console.log("Garagem Inteligente inicializada.");
});

/**
 * @async
 * @function buscarDetalhesVeiculoAPI
 * @description Busca detalhes extras de um ve√≠culo em uma API simulada local (JSON).
 * @param {string} identificadorVeiculo - O ID √∫nico do ve√≠culo a ser buscado.
 * @returns {Promise<object|null>} Uma Promise que resolve com o objeto contendo
 * os detalhes extras do ve√≠culo encontrado, ou null se n√£o encontrado.
 * Lan√ßa um erro se a requisi√ß√£o falhar ou o JSON for inv√°lido.
 * @throws {Error} Se ocorrer um erro de rede ou ao processar a resposta.
 * 
 * 
 */

// [Seu JS anterior...]

// <<< COLE A FUN√á√ÉO buscarDetalhesVeiculoAPI AQUI >>>
/**
 * @async
 * @function buscarDetalhesVeiculoAPI
 * [...] JSDoc
 */
async function buscarDetalhesVeiculoAPI(identificadorVeiculo) {
    // [...] Conte√∫do da fun√ß√£o buscarDetalhesVeiculoAPI
}
// <<< FIM DA FUN√á√ÉO buscarDetalhesVeiculoAPI >>>


// A fun√ß√£o abrirModalDetalhes come√ßa aqui ou logo abaixo
async function abrirModalDetalhes(veiculoId) {
    // [...]
}


// <<< APAGUE A FUN√á√ÉO ABRIRMODALDETALHES ANTIGA E COLE ESTA NO LUGAR >>>
async function abrirModalDetalhes(veiculoId) { // Note o 'async'
    // Verifica se o modal foi encontrado...
    if (!modal) { /* ... */ }

    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) { /* ... */ }

    // Elementos internos do modal...
    const tituloEl = document.getElementById('modalTituloVeiculo');
    // ...outros elementos...
    const detalhesApiDiv = document.getElementById('modalDetalhesExtrasApi'); // Pega a nova div

    if (!tituloEl /* ... || !detalhesApiDiv */ ) { /* ... */ } // Verifica todos

    // Configura√ß√£o Inicial do Modal...
    tituloEl.textContent = /* ... */
    // ...outras configs...

    // Atualiza informa√ß√µes principais e hist√≥rico PRIMEIRO
    atualizarInfoVeiculoNoModal(veiculoId);
    renderizarHistoricoManutencaoModal(veiculoId);

    // --- Busca e Exibi√ß√£o dos Detalhes da API Simulada ---
    detalhesApiDiv.innerHTML = '<h4>Detalhes da API</h4><p><em>Carregando detalhes extras...</em></p>'; // Mostra carregando

    try {
        const dadosApi = await buscarDetalhesVeiculoAPI(veiculoId); // CHAMA A NOVA FUN√á√ÉO

        if (dadosApi) {
            // Formata e exibe os dados encontrados
            detalhesApiDiv.innerHTML = `<h4>Detalhes da API</h4> /* ... HTML com os dados ... */ `;
        } else {
            // Informa que n√£o encontrou
            detalhesApiDiv.innerHTML = '<h4>Detalhes da API</h4><p><em>Detalhes extras n√£o encontrados...</em></p>';
        }
    } catch (error) {
        // Exibe a mensagem de erro
        detalhesApiDiv.innerHTML = `<h4>Detalhes da API</h4><p class="error-message">Erro ao buscar...: ${error.message}</p>`;
    }

    // Exibi√ß√£o Final do Modal...
    modal.style.display = 'block';
    // ...anima√ß√µes...
}
// <<< FIM DA FUN√á√ÉO ABRIRMODALDETALHES ATUALIZADA >>>


